//Code generated automatically by TMVA for Inference of Model file [PyTorchModelModule.pt] at [Thu Jul 22 09:29:54 2021] 
#include<algorithm>
#include<vector>
namespace TMVA_SOFIE_PyTorchModelModule{
namespace BLAS{
	extern "C" void sgemm_(const char * transa, const char * transb, const int * m, const int * n, const int * k,
	                       const float * alpha, const float * A, const int * lda, const float * B, const int * ldb,
	                       const float * beta, float * C, const int * ldc);
}//BLAS
float tensor_fc1weight[120] = {0.180375531, 0.0849573091, 0.59289676, -0.516803205, 0.452340335, 0.0034040648, 0.524855435, 0.485691607, 0.482805669, 0.144801632, 0.215640783, -0.679825306, -0.347226918, 0.639150262, -0.419446528, -0.210574225, 0.201896265, 0.341459632, -0.632975757, 0.417043507, 0.311309129, -0.842407167, 0.329777718, -0.577715874, -0.296686411, -0.651471257, 0.551395059, -0.108595535, 0.254706204, 0.360657454, 0.201861441, -0.113504022, -0.690569878, 0.793133974, -0.533015132, -0.44475621, -0.0082964031, 0.205618382, 0.150916398, -0.45421198, -0.361548603, 0.0831545591, -0.00441598892, 0.427113861, -0.68287009, 0.313940763, -0.00642531831, -0.185707584, 0.146930113, -0.861460388, 0.647082806, 0.402285337, -0.298206866, 0.568238616, 0.578088343, -0.46106264, -0.601375997, 0.690999985, 0.14871642, 0.705306888, 0.227772489, -0.585573018, 0.0816050768, 0.672401071, -0.581572115, 0.799529374, 0.13671039, -0.409042209, 0.181696132, 0.00161588192, 0.754560351, 0.583587289, -0.59351784, 0.336567163, -0.00419664383, -0.501255631, 0.0892138332, -0.806577027, 0.0403338373, -0.667523146, 0.839962065, -0.463050127, -0.5401178, -0.895308614, -0.547351897, -0.168972343, 0.686642468, -0.300602585, -0.360178143, -0.173137829, -0.105057709, 0.566701829, -0.5719015, 0.812280536, 0.118057251, 0.651475251, -0.149145305, -0.399718046, 0.46537441, -0.0126701137, 0.882391989, 0.691610515, -0.163105577, -0.0504794009, 0.37398681, 0.524868071, -0.232407466, 0.274509788, -0.682973683, -0.750386417, 0.252927482, -0.637903094, 0.143832892, 0.46355623, 0.748843729, -0.541143477, -0.678127289, -0.554261506, -0.464966744, 0.417959422};
float tensor_fc1bias[120] = {-0.0126080187, 0.561490178, -0.73755306, 0.108024105, -0.556398571, 0.0742879882, -0.477406055, 0.257918477, -0.782667041, 0.376864433, -0.642483354, 0.321254462, 0.635836244, 0.0600101016, -0.0594083406, 0.488720685, -0.0874213278, 0.457888752, 0.580287158, 0.453750908, 0.296483248, -0.426122665, 0.118308611, -0.468123794, 0.360822976, -0.0458008349, -0.968828321, 0.0940907896, -0.22759065, 0.306136847, -0.405636728, 0.271889389, 0.344598413, -0.589908063, 0.673631012, -0.88069278, 0.0536871031, -0.603154063, -0.127427801, 0.446361333, -0.300122201, -0.828349233, -0.90514183, 0.162554875, 0.492933333, 0.378609329, 0.296340942, -0.355123311, 0.337192029, -0.360134363, 0.190365985, 0.428321719, -0.786922455, -0.47766, -0.72491169, 0.297750682, -0.0205120593, -0.415571719, 0.542648971, 0.0219460577, -0.165407777, -0.205370173, -0.768673658, -0.75005722, 0.500347733, -0.564281404, 0.60562706, 0.4945274, 0.496144503, -0.950230837, 0.504146755, -0.0467954464, 0.123842843, 0.361766011, -0.375629187, 0.359291315, 0.45277366, -0.791135073, 0.105610996, 0.173073903, 0.0895588025, 0.435669959, 0.0836472586, -0.968147814, 0.0594401285, -0.00310925674, 0.659826577, 0.328508139, 0.635120392, 0.141105071, 0.648131907, -0.218956411, 0.069633916, -0.212113425, -0.625053644, -0.523965478, -0.139724255, 0.383699089, -0.849475086, 0.0200959258, -0.415881783, -0.19538185, -0.261919469, 0.29885605, -0.180743068, -0.734765291, 0.681578517, -0.343928874, -0.504585743, -0.160153836, 0.460960001, -0.333992124, 0.629528642, -0.539335847, 0.418373168, -0.798008621, -0.811147094, -0.182716832, 0.479234755, -0.274375767};
float tensor_4[14400];
float tensor_5[14400];
float tensor_3[14400];
std::vector<float> infer(float* tensor_x1){
	char op_0_transA = 'n';
	char op_0_transB = 't';
	int op_0_m = 120;
	int op_0_n = 120;
	int op_0_k = 1;
	float op_0_alpha = 1;
	float op_0_beta = 1;
	int op_0_lda = 1;
	int op_0_ldb = 1;
	std::copy(tensor_fc1bias, tensor_fc1bias + 120, tensor_3);
	BLAS::sgemm_(&op_0_transB, &op_0_transA, &op_0_n, &op_0_m, &op_0_k, &op_0_alpha, tensor_fc1weight, &op_0_ldb, tensor_x1, &op_0_lda, &op_0_beta, tensor_3, &op_0_n);
	for (int id = 0; id < 14400 ; id++){
		tensor_4[id] = ((tensor_3[id] > 0 )? tensor_3[id] : 0);
	}
	for (int id = 0; id < 14400 ; id++){
		 tensor_5[id / 120 % 120 * 1 + id / 1 % 120 * 120] = tensor_4[id];
	}
	std::vector<float> ret (tensor_5, tensor_5 + sizeof(tensor_5) / sizeof(tensor_5[0]));
	return ret;
}
} //TMVA_SOFIE_PyTorchModelModule
