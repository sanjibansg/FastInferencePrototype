//Code generated automatically by TMVA for Inference of Model file [PyTorchModelModule.pt] at [Mon Jul 26 18:25:38 2021] 
#include<algorithm>
#include<vector>
namespace TMVA_SOFIE_PyTorchModelModule{
namespace BLAS{
	extern "C" void sgemm_(const char * transa, const char * transb, const int * m, const int * n, const int * k,
	                       const float * alpha, const float * A, const int * lda, const float * B, const int * ldb,
	                       const float * beta, float * C, const int * ldc);
}//BLAS
float tensor_fc1weight[120] = {-0.369226068, 0.267352581, 0.239657044, 0.706214368, -0.859469354, 0.73431164, -0.558551967, 0.207380667, -0.294740289, 0.119431131, 0.820795774, 0.181440383, -0.159737051, 0.402374983, 0.184933245, 0.136171773, -0.0806799978, -0.296945155, 0.784545183, 0.319601208, 0.802304029, 0.366306931, 0.0318771601, 0.453804493, 0.778104544, -0.0960575193, 0.823711872, 0.719866872, 0.504698813, 0.539929152, -0.940043688, 0.352564305, 0.689381957, -0.575833797, -0.0723315477, 0.351335973, -0.749199152, 0.547751248, 0.613309503, -0.275263906, 0.0633883476, -0.135461524, -0.465580136, 0.85607487, -0.239281535, -0.88150245, -0.398243695, 0.130264699, -0.693728864, -0.0470578671, 0.059541326, -0.723991692, 0.478354126, 0.870310247, 0.246664822, -0.443874955, 0.0936021507, 0.635836601, 0.735541821, -0.223384395, 0.804957509, -0.392603904, 0.690031528, -0.0859936923, -0.699371338, -0.420917243, 0.732599974, -0.214900583, 0.70340699, -0.710977137, -0.283754259, -0.451983243, 0.511389494, 0.778895974, -0.512359917, -0.62071836, 0.117176674, -0.929546714, -0.519969642, -0.362402797, 0.26720044, 0.830388129, 0.377525389, -0.730910659, -0.379649967, -0.579527974, -0.832943916, 0.331658065, 0.636093974, -0.618283749, -0.841207743, 0.232164577, -0.144486904, 0.2416628, 0.242010266, 0.731603265, -0.612163305, 0.468803316, -0.705400407, -0.0104906633, -0.918390334, -0.239618912, 0.9365924, 0.413908541, -0.197074041, 0.669313014, -0.143133327, -0.24652952, -0.00540435314, 0.43424347, -0.468882948, -0.517220616, -0.901740551, 0.796796143, -0.49360925, 0.128780216, -0.859924197, -0.53554213, -0.0246737972, 0.072476849};
float tensor_fc1bias[120] = {-0.157364756, -0.964563489, -0.952582002, -0.683670878, -0.999863684, -0.178954199, -0.916981876, 0.654193521, 0.215879157, 0.374847233, 0.0358479917, -0.409361959, 0.580099642, 0.507051885, -0.394012928, 0.463214636, -0.00663325097, -0.783289135, 0.0999043509, -0.493839741, -0.79758352, -0.514203548, -0.204673529, -0.323373169, -0.00850097742, 0.572333515, 0.677861273, 0.0879454538, 0.098831065, 0.00491897156, -0.874559283, -0.651812553, -0.223553091, 0.274360031, -0.303821564, -0.513290286, -0.820994437, 0.424045771, 0.143647, -0.415891021, -0.727768421, 0.00564288441, -0.72392565, -0.737083018, -0.109619662, -0.444082648, 0.124688916, 0.55193603, -0.529994905, -0.919525862, 0.385259449, -0.683125734, 0.70132184, -0.738386035, 0.155190796, -0.184226051, 0.207912385, -0.656680226, -0.553329408, -0.794798732, -0.924475133, -0.787380219, -0.821985424, 0.34261331, -0.950847566, -0.577308357, -0.746409893, -0.697054863, 0.0442797393, -0.41882354, 0.509284079, -0.61822319, -0.343007088, -0.980933249, 0.499964505, 0.185102656, 0.42528218, -0.943990946, -0.649593234, -0.197884232, 0.607131004, -0.380962312, -0.0970596373, 0.244430333, -0.674777865, 0.372238696, 0.0815016925, -0.270341843, 0.459959984, 0.0415653847, -0.201988265, 0.659330428, -0.552079439, 0.627635002, 0.477442116, -0.608415484, -0.205035806, -0.910970926, -0.278518289, 0.533871233, -0.66377914, 0.383324414, -0.821971595, -0.487716436, 0.0800835863, 0.257750064, 0.638912797, -0.656354785, -0.878376007, -0.928112686, 0.178172141, -0.198775187, -0.723644853, -0.290340275, -0.128997549, 0.151089713, -0.254081428, -0.215881363, 0.348932266, -0.0424972847};
float tensor_4[14400];
float tensor_5[14400];
float tensor_3[14400];
std::vector<float> infer(float* tensor_x1){
	char op_0_transA = 'n';
	char op_0_transB = 't';
	int op_0_m = 120;
	int op_0_n = 120;
	int op_0_k = 1;
	float op_0_alpha = 1;
	float op_0_beta = 1;
	int op_0_lda = 1;
	int op_0_ldb = 1;
	std::copy(tensor_fc1bias, tensor_fc1bias + 120, tensor_3);
	BLAS::sgemm_(&op_0_transB, &op_0_transA, &op_0_n, &op_0_m, &op_0_k, &op_0_alpha, tensor_fc1weight, &op_0_ldb, tensor_x1, &op_0_lda, &op_0_beta, tensor_3, &op_0_n);
	for (int id = 0; id < 14400 ; id++){
		tensor_4[id] = ((tensor_3[id] > 0 )? tensor_3[id] : 0);
	}
	for (int id = 0; id < 14400 ; id++){
		 tensor_5[id / 120 % 120 * 1 + id / 1 % 120 * 120] = tensor_4[id];
	}
	std::vector<float> ret (tensor_5, tensor_5 + sizeof(tensor_5) / sizeof(tensor_5[0]));
	return ret;
}
} //TMVA_SOFIE_PyTorchModelModule
